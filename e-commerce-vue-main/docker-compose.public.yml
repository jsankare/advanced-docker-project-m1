version: '3.8'

# ========================================
# DÃ‰PLOIEMENT PUBLIC - E-COMMERCE MICROSERVICES
# ========================================
# Utilisation simple : docker-compose -f docker-compose.public.yml up -d
# AUCUN CODE SOURCE REQUIS - Utilise uniquement les images Docker Hub

services:
  auth-service:
    image: lucasratiaray/ecommerce-auth-service:latest
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URI=mongodb://root:ecommerce123@mongodb:27017/auth_db?authSource=admin
      - JWT_SECRET=ecommerce_jwt_secret_key_2024_secure
    networks:
      - backend
    depends_on:
      - mongodb
    restart: unless-stopped

  product-service:
    image: lucasratiaray/ecommerce-product-service:latest
    environment:
      - NODE_ENV=production
      - PORT=3002
      - MONGODB_URI=mongodb://root:ecommerce123@mongodb:27017/products_db?authSource=admin
      - JWT_SECRET=ecommerce_jwt_secret_key_2024_secure
    networks:
      - backend
    depends_on:
      - mongodb
    restart: unless-stopped

  order-service:
    image: lucasratiaray/ecommerce-order-service:latest
    environment:
      - NODE_ENV=production
      - PORT=3003
      - MONGODB_URI=mongodb://root:ecommerce123@mongodb:27017/orders_db?authSource=admin
      - JWT_SECRET=ecommerce_jwt_secret_key_2024_secure
    networks:
      - backend
    depends_on:
      - mongodb
    restart: unless-stopped

  frontend:
    image: lucasratiaray/ecommerce-frontend:latest
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
      - VITE_AUTH_SERVICE_URL=http://auth-service:3001
      - VITE_PRODUCT_SERVICE_URL=http://product-service:3002
      - VITE_ORDER_SERVICE_URL=http://order-service:3003
    networks:
      - frontend
      - backend
    depends_on:
      - auth-service
      - product-service
      - order-service
    restart: unless-stopped

  mongodb:
    image: mongo:4.4
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=ecommerce123
    volumes:
      - mongodb_data:/data/db
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Bonus: Monitoring avec Portainer
  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: unless-stopped

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  portainer_data:
    driver: local